pipeline {
    agent {
        docker { image 'maven:3.9.3-eclipse-temurin-17'
            args '-v $HOME/.m2:/root/.m2 -v /var/run/docker.sock:/var/run/docker.sock'
            }
    }
    environment {
        GIT_URL = 'https://github.com/christus2024/mkutano-frontend.git'
        GIT_CREDENTIAL_ID = 'mkutano_project'
        TZ = 'Europe/Paris'
        POM_FILE = 'pom.xml'
        RELEASE_VERSION_FILE = 'versions.txt' // Nom du fichier pour stocker les versions
    }
    parameters {
            string(name: 'releaseVersion', defaultValue: "${params[releaseVersion]}", description: 'Version de release', trim: true)
            string(name: 'snapshotVersion', defaultValue: "${params[snapshotVersion]}",description: 'Version de snapshot', trim: true)
            booleanParam(name:'isRelease', defaultValue: false, description: 'Build de release ?')
    }
    //Valid option types for options: [authorizationMatrix, buildDiscarder, catchError, checkoutToSubdirectory, disableConcurrentBuilds,
     //disableRestartFromStage, disableResume, dockerNode, durabilityHint, githubProjectProperty, newContainerPerStage,
      //overrideIndexTriggers, parallelsAlwaysFailFast, preserveStashes, quietPeriod, rateLimitBuilds, retry, script,
      //skipDefaultCheckout, skipStagesAfterUnstable, timeout, timestamps, waitUntil, warnError, withChecks, withContext,
     //withCredentials, withEnv, wrap, ws]
    options{
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    stages {
        stage('Validate inputs') {
            steps {
                script {
                    try{
                        if (params.isRelease && (!params.releaseVersion || !params.snapshotVersion)) {
                            error "Les versions de release et de snapshot sont nécessaires pour un build de release."
                            currentBuild.result = 'FAILURE'
                        }
                        sh 'git status'
                        sh 'git branch'
                        echo "releaseVersion:  ${params.releaseVersion}"
                        echo "snapshotVersion:  ${params.snapshotVersion}"
                        echo "isRelease:  ${params.isRelease}"
                        sh '''
                            sudo apt-get update
                            sudo apt-get install -y docker.io
                           '''
                    } catch(error){
                        error("erreur lors de la validation des inputs: ${error}")
                        currentBuild.result = 'FAILURE'
                    }
                }

            }
        }
        stage('Checkout project') {
            steps {
                echo "GIT_BRANCH:  ${env.GIT_BRANCH}" // Ajout de 'env.' pour plus de clarté
                echo "BRANCH_NAME:  ${BRANCH_NAME}"
                script{
                    sh 'git config --local user.email christus.tchassi@it4innov.fr'
                    sh 'git config --local user.name it4innov'
                }
                git branch: env.BRANCH_NAME, url: env.GIT_URL, credentialsId: env.GIT_CREDENTIAL_ID

            }
        }

        stage('Test') {
            steps {
                // Utilisez catchError pour gérer les erreurs de tests et faire echouer la pipeline si les tests echouent
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    //sh 'mvn clean verify -Ddependency-check.skip=true'  //commande maven permetant de sauter la phase dependancy-check
                    sh 'mvn clean verify'       //plus besoin de sauter cette phase car par defaut j'ai desactiver le plugin dans le pom avec la proprieté skip.dependancy-check
                }
            }
        }
        stage('Check Dependencies') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                echo "Vérification des dépendances..."
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                   sh 'mvn dependency-check:check -Dskip.dependency.check=true' // la proprieté skip.dependency.check permet d'activer le plugin maven pour l'execution du dependancy-check
                }

            }
        }
         stage('Build') {
            steps {
                script {
                    try{
                        if (params.isRelease) {
                            println 'Construction de la release'
                            // 1. Modifier la version dans le pom.xml
                            sh "mvn versions:set -DnewVersion=${params.releaseVersion}"

                            // 2. Ajouter et commit le changement de version
                            sh 'git add pom.xml'
                            sh "git commit -m \"[jenkins-commit] Update project version to ${params.releaseVersion}\""

                            // 3. Continuer avec le packaging
                            sh 'mvn  package'


                        } else {
                            //Continuer avec le packaging
                            sh 'mvn  package'
                        }
                        println 'Construction de la release éffectuée'
                    } catch (exception){
                        error "Echec du build"
                        currentBuild.result = 'FAILURE'
                    }

                }
            }
         }
        stage('Archive') {
            steps {
                script {
                    def profile = params.isRelease ? 'release-profile' : 'snapshot-profile'
                    sh "mvn deploy -P ${profile} --settings ./.m2/settings.xml"
                }
            }
        }

        stage('Build Docker Image') {
            agent {
                docker { image 'docker:19.03.12-dind' }
            }
            steps {
                script {
                    // Remplacez <your-image-name> et <path-to-dockerfile> par vos valeurs
                    def pom = readFile(POM_FILE)
                    def imageName = params.isRelease ? " ${pom.artifactId}:${params.releaseVersion}" : "${pom.artifactId}:${params.snapshotVersion}"
                    println "imageName: ${imageName}"
                    sh "docker build -t ${imageName} -f dockerfile ."
                }
            }
        }
        stage('Preparation de la version de dev'){
            steps{
                script{
                    println 'Écrire la version de la release dans le fichier'
                    def releaseVersion = params.releaseVersion
                    echo "Enregistrement de la version de release: ${releaseVersion}"
                    sh "echo ${releaseVersion} >> ${VERSION_FILE}"
                    echo "Versions disponibles pour le déploiement :"
                    sh "cat ${VERSION_FILE}"
                    println 'Mise à jour de la version de developpement'
                    // 4. Modifier la version dans le pom.xml
                    sh "mvn versions:set -DnewVersion=${params.snapshotVersion}"

                    // 5. Ajouter et commit le changement de version
                    sh 'git add pom.xml'
                    sh "git commit -m \"[jenkins-commit] Update project version to ${params.snapshotVersion}\""
                   // withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIAL_ID, usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                   //      sh "git push --set-upstream origin ${BRANCH_NAME}"
                  //  }
                }
            }
        }
    }
    //post {

     //   always {
     //       cleanWs()
     //   }
  //  }
}


// TODO ajouter un utilisateur jenkins au projet
// configurer les profiles snapshot et release pour les pusher les artefacts sur nexus
// Deployer sonar et harbord et configurer l'analyse de qualité
// Installer trivy et configurer l'analyse de vulnerabilité
// installer le plugin owaps dans le code et configurer le scan sur la branche developpement
