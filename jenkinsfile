pipeline {
    agent {
        docker { image 'maven:3.9.3-eclipse-temurin-17'
            args '-v $HOME/.m2:/root/.m2' }
    }
    environment {
        GIT_URL = 'https://github.com/christus2024/mkutano-frontend.git'
        TZ = 'Europe/paris'
    }
    parameters {
            string(name: 'releaseVersion', defaultValue: "${params[releaseVersion]}", description: 'Version de release')
            string(name: 'snapshotVersion', defaultValue: "${params[snapshotVersion]}",description: 'Version de snapshot')
            booleanParam(name:'isRelease', defaultValue: false, description: 'Build de release ?')
    }
    //Valid option types for options: [authorizationMatrix, buildDiscarder, catchError, checkoutToSubdirectory, disableConcurrentBuilds,
     //disableRestartFromStage, disableResume, dockerNode, durabilityHint, githubProjectProperty, newContainerPerStage,
      //overrideIndexTriggers, parallelsAlwaysFailFast, preserveStashes, quietPeriod, rateLimitBuilds, retry, script,
      //skipDefaultCheckout, skipStagesAfterUnstable, timeout, timestamps, waitUntil, warnError, withChecks, withContext,
     //withCredentials, withEnv, wrap, ws]
    options{
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    stages {
        stage('Checkout project') {
            steps {
                echo "GIT_BRANCH:  ${env.GIT_BRANCH}" // Ajout de 'env.' pour plus de clarté
                echo "BRANCH_NAME:  ${BRANCH_NAME}"
                git branch: env.BRANCH_NAME, url: env.GIT_URL, credentialsId: "mkutano_project"
            }
        }
        stage('Validate inputs') {
            steps {
                script {
                    if (params.isRelease && (!params.releaseVersion || !params.snapshotVersion)) {
                        error "Les versions de release et de snapshot sont nécessaires pour un build de release."
                    }
                    sh 'git status'
                    sh 'git branch'
                    sh 'git add pom.xml'

                    echo "releaseVersion:  ${params.releaseVersion}"
                    echo "snapshotVersion:  ${params.snapshotVersion}"
                    echo "isRelease:  ${params.isRelease}"
                }

            }
        }
        stage('Test and Build') {
            steps {
                sh 'mvn clean verify'
            }
        }
         stage('Build') {
            steps {
                script {
                    if (params.isRelease) {
                        println 'Construction de la release'
                        // 1. Modifier la version dans le pom.xml
                        sh "mvn versions:set -DnewVersion=${params.releaseVersion}"

                        // 2. Ajouter et commit le changement de version
                        sh 'git add pom.xml'
                       // sh "git commit -m \"[jenkins-commit] Update project version to ${params.releaseVersion}\""

                         println 'Construction de la release éffectuée'

                         // 3. Continuer avec le packaging
                         sh 'mvn  package'

                         println 'Mise à jour de la version de developpement'
                         // 4. Modifier la version dans le pom.xml
                         sh "mvn versions:set -DnewVersion=${params.snapshotVersion}"

                        // 5. Ajouter et commit le changement de version
                        sh 'git add pom.xml'
                        sh "git commit -m \"[jenkins-commit] Update project version to ${params.snapshotVersion}\""

                    } else {
                    //Continuer avec le packaging
                    sh 'mvn  package'
                    }
                }
            }
         }
        stage('Archive') {
            steps {
                script {
                    def profile = params.isRelease ? 'release-profile' : 'snapshot-profile'
                    sh "mvn deploy -P ${profile} --settings ./.m2/settings.xml"
                }
            }
        }
    }
    post {

        always {
            cleanWs()
        }
    }
}


// TODO ajouter un utilisateur jenkins au projet
// configurer les profiles snapshot et release pour les pusher les artefacts sur nexus
// Deployer sonar et harbord et configurer l'analyse de qualité
// Installer trivy et configurer l'analyse de vulnerabilité
// installer le plugin owaps dans le code et configurer le scan sur la branche developpement
